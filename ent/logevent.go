// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/velcro-xiv/velcro/ent/logevent"
)

// LogEvent is the model entity for the LogEvent schema.
type LogEvent struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp time.Time `json:"timestamp,omitempty"`
	// Level holds the value of the "level" field.
	Level int `json:"level,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LogEvent) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case logevent.FieldID, logevent.FieldLevel:
			values[i] = new(sql.NullInt64)
		case logevent.FieldMessage:
			values[i] = new(sql.NullString)
		case logevent.FieldTimestamp:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type LogEvent", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LogEvent fields.
func (le *LogEvent) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case logevent.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			le.ID = int(value.Int64)
		case logevent.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				le.Timestamp = value.Time
			}
		case logevent.FieldLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value.Valid {
				le.Level = int(value.Int64)
			}
		case logevent.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				le.Message = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this LogEvent.
// Note that you need to call LogEvent.Unwrap() before calling this method if this LogEvent
// was returned from a transaction, and the transaction was committed or rolled back.
func (le *LogEvent) Update() *LogEventUpdateOne {
	return (&LogEventClient{config: le.config}).UpdateOne(le)
}

// Unwrap unwraps the LogEvent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (le *LogEvent) Unwrap() *LogEvent {
	_tx, ok := le.config.driver.(*txDriver)
	if !ok {
		panic("ent: LogEvent is not a transactional entity")
	}
	le.config.driver = _tx.drv
	return le
}

// String implements the fmt.Stringer.
func (le *LogEvent) String() string {
	var builder strings.Builder
	builder.WriteString("LogEvent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", le.ID))
	builder.WriteString("timestamp=")
	builder.WriteString(le.Timestamp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("level=")
	builder.WriteString(fmt.Sprintf("%v", le.Level))
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(le.Message)
	builder.WriteByte(')')
	return builder.String()
}

// LogEvents is a parsable slice of LogEvent.
type LogEvents []*LogEvent

func (le LogEvents) config(cfg config) {
	for _i := range le {
		le[_i].config = cfg
	}
}
