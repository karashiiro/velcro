// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/velcro-xiv/velcro/ent/logevent"
)

// LogEventCreate is the builder for creating a LogEvent entity.
type LogEventCreate struct {
	config
	mutation *LogEventMutation
	hooks    []Hook
}

// SetTimestamp sets the "timestamp" field.
func (lec *LogEventCreate) SetTimestamp(t time.Time) *LogEventCreate {
	lec.mutation.SetTimestamp(t)
	return lec
}

// SetLevel sets the "level" field.
func (lec *LogEventCreate) SetLevel(i int) *LogEventCreate {
	lec.mutation.SetLevel(i)
	return lec
}

// SetMessage sets the "message" field.
func (lec *LogEventCreate) SetMessage(s string) *LogEventCreate {
	lec.mutation.SetMessage(s)
	return lec
}

// Mutation returns the LogEventMutation object of the builder.
func (lec *LogEventCreate) Mutation() *LogEventMutation {
	return lec.mutation
}

// Save creates the LogEvent in the database.
func (lec *LogEventCreate) Save(ctx context.Context) (*LogEvent, error) {
	var (
		err  error
		node *LogEvent
	)
	if len(lec.hooks) == 0 {
		if err = lec.check(); err != nil {
			return nil, err
		}
		node, err = lec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LogEventMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = lec.check(); err != nil {
				return nil, err
			}
			lec.mutation = mutation
			if node, err = lec.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(lec.hooks) - 1; i >= 0; i-- {
			if lec.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = lec.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, lec.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*LogEvent)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from LogEventMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (lec *LogEventCreate) SaveX(ctx context.Context) *LogEvent {
	v, err := lec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lec *LogEventCreate) Exec(ctx context.Context) error {
	_, err := lec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lec *LogEventCreate) ExecX(ctx context.Context) {
	if err := lec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lec *LogEventCreate) check() error {
	if _, ok := lec.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "LogEvent.timestamp"`)}
	}
	if _, ok := lec.mutation.Level(); !ok {
		return &ValidationError{Name: "level", err: errors.New(`ent: missing required field "LogEvent.level"`)}
	}
	if _, ok := lec.mutation.Message(); !ok {
		return &ValidationError{Name: "message", err: errors.New(`ent: missing required field "LogEvent.message"`)}
	}
	return nil
}

func (lec *LogEventCreate) sqlSave(ctx context.Context) (*LogEvent, error) {
	_node, _spec := lec.createSpec()
	if err := sqlgraph.CreateNode(ctx, lec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (lec *LogEventCreate) createSpec() (*LogEvent, *sqlgraph.CreateSpec) {
	var (
		_node = &LogEvent{config: lec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: logevent.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: logevent.FieldID,
			},
		}
	)
	if value, ok := lec.mutation.Timestamp(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: logevent.FieldTimestamp,
		})
		_node.Timestamp = value
	}
	if value, ok := lec.mutation.Level(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: logevent.FieldLevel,
		})
		_node.Level = value
	}
	if value, ok := lec.mutation.Message(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: logevent.FieldMessage,
		})
		_node.Message = value
	}
	return _node, _spec
}

// LogEventCreateBulk is the builder for creating many LogEvent entities in bulk.
type LogEventCreateBulk struct {
	config
	builders []*LogEventCreate
}

// Save creates the LogEvent entities in the database.
func (lecb *LogEventCreateBulk) Save(ctx context.Context) ([]*LogEvent, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lecb.builders))
	nodes := make([]*LogEvent, len(lecb.builders))
	mutators := make([]Mutator, len(lecb.builders))
	for i := range lecb.builders {
		func(i int, root context.Context) {
			builder := lecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LogEventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lecb *LogEventCreateBulk) SaveX(ctx context.Context) []*LogEvent {
	v, err := lecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lecb *LogEventCreateBulk) Exec(ctx context.Context) error {
	_, err := lecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lecb *LogEventCreateBulk) ExecX(ctx context.Context) {
	if err := lecb.Exec(ctx); err != nil {
		panic(err)
	}
}
