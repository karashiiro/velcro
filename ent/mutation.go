// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/velcro-xiv/velcro/ent/message"
	"github.com/velcro-xiv/velcro/ent/predicate"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeMessage = "Message"
)

// MessageMutation represents an operation that mutates the Message nodes in the graph.
type MessageMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	timestamp           *time.Time
	version             *int
	addversion          *int
	segment             *int
	addsegment          *int
	opcode              *int
	addopcode           *int
	source_address      *string
	source_port         *int
	addsource_port      *int
	destination_address *string
	destination_port    *int
	adddestination_port *int
	data                *[]byte
	clearedFields       map[string]struct{}
	done                bool
	oldValue            func(context.Context) (*Message, error)
	predicates          []predicate.Message
}

var _ ent.Mutation = (*MessageMutation)(nil)

// messageOption allows management of the mutation configuration using functional options.
type messageOption func(*MessageMutation)

// newMessageMutation creates new mutation for the Message entity.
func newMessageMutation(c config, op Op, opts ...messageOption) *MessageMutation {
	m := &MessageMutation{
		config:        c,
		op:            op,
		typ:           TypeMessage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMessageID sets the ID field of the mutation.
func withMessageID(id int) messageOption {
	return func(m *MessageMutation) {
		var (
			err   error
			once  sync.Once
			value *Message
		)
		m.oldValue = func(ctx context.Context) (*Message, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Message.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMessage sets the old Message of the mutation.
func withMessage(node *Message) messageOption {
	return func(m *MessageMutation) {
		m.oldValue = func(context.Context) (*Message, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MessageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MessageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MessageMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MessageMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Message.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTimestamp sets the "timestamp" field.
func (m *MessageMutation) SetTimestamp(t time.Time) {
	m.timestamp = &t
}

// Timestamp returns the value of the "timestamp" field in the mutation.
func (m *MessageMutation) Timestamp() (r time.Time, exists bool) {
	v := m.timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "timestamp" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// ResetTimestamp resets all changes to the "timestamp" field.
func (m *MessageMutation) ResetTimestamp() {
	m.timestamp = nil
}

// SetVersion sets the "version" field.
func (m *MessageMutation) SetVersion(i int) {
	m.version = &i
	m.addversion = nil
}

// Version returns the value of the "version" field in the mutation.
func (m *MessageMutation) Version() (r int, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldVersion(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// AddVersion adds i to the "version" field.
func (m *MessageMutation) AddVersion(i int) {
	if m.addversion != nil {
		*m.addversion += i
	} else {
		m.addversion = &i
	}
}

// AddedVersion returns the value that was added to the "version" field in this mutation.
func (m *MessageMutation) AddedVersion() (r int, exists bool) {
	v := m.addversion
	if v == nil {
		return
	}
	return *v, true
}

// ResetVersion resets all changes to the "version" field.
func (m *MessageMutation) ResetVersion() {
	m.version = nil
	m.addversion = nil
}

// SetSegment sets the "segment" field.
func (m *MessageMutation) SetSegment(i int) {
	m.segment = &i
	m.addsegment = nil
}

// Segment returns the value of the "segment" field in the mutation.
func (m *MessageMutation) Segment() (r int, exists bool) {
	v := m.segment
	if v == nil {
		return
	}
	return *v, true
}

// OldSegment returns the old "segment" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldSegment(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSegment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSegment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSegment: %w", err)
	}
	return oldValue.Segment, nil
}

// AddSegment adds i to the "segment" field.
func (m *MessageMutation) AddSegment(i int) {
	if m.addsegment != nil {
		*m.addsegment += i
	} else {
		m.addsegment = &i
	}
}

// AddedSegment returns the value that was added to the "segment" field in this mutation.
func (m *MessageMutation) AddedSegment() (r int, exists bool) {
	v := m.addsegment
	if v == nil {
		return
	}
	return *v, true
}

// ResetSegment resets all changes to the "segment" field.
func (m *MessageMutation) ResetSegment() {
	m.segment = nil
	m.addsegment = nil
}

// SetOpcode sets the "opcode" field.
func (m *MessageMutation) SetOpcode(i int) {
	m.opcode = &i
	m.addopcode = nil
}

// Opcode returns the value of the "opcode" field in the mutation.
func (m *MessageMutation) Opcode() (r int, exists bool) {
	v := m.opcode
	if v == nil {
		return
	}
	return *v, true
}

// OldOpcode returns the old "opcode" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldOpcode(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOpcode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOpcode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOpcode: %w", err)
	}
	return oldValue.Opcode, nil
}

// AddOpcode adds i to the "opcode" field.
func (m *MessageMutation) AddOpcode(i int) {
	if m.addopcode != nil {
		*m.addopcode += i
	} else {
		m.addopcode = &i
	}
}

// AddedOpcode returns the value that was added to the "opcode" field in this mutation.
func (m *MessageMutation) AddedOpcode() (r int, exists bool) {
	v := m.addopcode
	if v == nil {
		return
	}
	return *v, true
}

// ClearOpcode clears the value of the "opcode" field.
func (m *MessageMutation) ClearOpcode() {
	m.opcode = nil
	m.addopcode = nil
	m.clearedFields[message.FieldOpcode] = struct{}{}
}

// OpcodeCleared returns if the "opcode" field was cleared in this mutation.
func (m *MessageMutation) OpcodeCleared() bool {
	_, ok := m.clearedFields[message.FieldOpcode]
	return ok
}

// ResetOpcode resets all changes to the "opcode" field.
func (m *MessageMutation) ResetOpcode() {
	m.opcode = nil
	m.addopcode = nil
	delete(m.clearedFields, message.FieldOpcode)
}

// SetSourceAddress sets the "source_address" field.
func (m *MessageMutation) SetSourceAddress(s string) {
	m.source_address = &s
}

// SourceAddress returns the value of the "source_address" field in the mutation.
func (m *MessageMutation) SourceAddress() (r string, exists bool) {
	v := m.source_address
	if v == nil {
		return
	}
	return *v, true
}

// OldSourceAddress returns the old "source_address" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldSourceAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSourceAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSourceAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSourceAddress: %w", err)
	}
	return oldValue.SourceAddress, nil
}

// ResetSourceAddress resets all changes to the "source_address" field.
func (m *MessageMutation) ResetSourceAddress() {
	m.source_address = nil
}

// SetSourcePort sets the "source_port" field.
func (m *MessageMutation) SetSourcePort(i int) {
	m.source_port = &i
	m.addsource_port = nil
}

// SourcePort returns the value of the "source_port" field in the mutation.
func (m *MessageMutation) SourcePort() (r int, exists bool) {
	v := m.source_port
	if v == nil {
		return
	}
	return *v, true
}

// OldSourcePort returns the old "source_port" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldSourcePort(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSourcePort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSourcePort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSourcePort: %w", err)
	}
	return oldValue.SourcePort, nil
}

// AddSourcePort adds i to the "source_port" field.
func (m *MessageMutation) AddSourcePort(i int) {
	if m.addsource_port != nil {
		*m.addsource_port += i
	} else {
		m.addsource_port = &i
	}
}

// AddedSourcePort returns the value that was added to the "source_port" field in this mutation.
func (m *MessageMutation) AddedSourcePort() (r int, exists bool) {
	v := m.addsource_port
	if v == nil {
		return
	}
	return *v, true
}

// ResetSourcePort resets all changes to the "source_port" field.
func (m *MessageMutation) ResetSourcePort() {
	m.source_port = nil
	m.addsource_port = nil
}

// SetDestinationAddress sets the "destination_address" field.
func (m *MessageMutation) SetDestinationAddress(s string) {
	m.destination_address = &s
}

// DestinationAddress returns the value of the "destination_address" field in the mutation.
func (m *MessageMutation) DestinationAddress() (r string, exists bool) {
	v := m.destination_address
	if v == nil {
		return
	}
	return *v, true
}

// OldDestinationAddress returns the old "destination_address" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldDestinationAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDestinationAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDestinationAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDestinationAddress: %w", err)
	}
	return oldValue.DestinationAddress, nil
}

// ResetDestinationAddress resets all changes to the "destination_address" field.
func (m *MessageMutation) ResetDestinationAddress() {
	m.destination_address = nil
}

// SetDestinationPort sets the "destination_port" field.
func (m *MessageMutation) SetDestinationPort(i int) {
	m.destination_port = &i
	m.adddestination_port = nil
}

// DestinationPort returns the value of the "destination_port" field in the mutation.
func (m *MessageMutation) DestinationPort() (r int, exists bool) {
	v := m.destination_port
	if v == nil {
		return
	}
	return *v, true
}

// OldDestinationPort returns the old "destination_port" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldDestinationPort(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDestinationPort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDestinationPort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDestinationPort: %w", err)
	}
	return oldValue.DestinationPort, nil
}

// AddDestinationPort adds i to the "destination_port" field.
func (m *MessageMutation) AddDestinationPort(i int) {
	if m.adddestination_port != nil {
		*m.adddestination_port += i
	} else {
		m.adddestination_port = &i
	}
}

// AddedDestinationPort returns the value that was added to the "destination_port" field in this mutation.
func (m *MessageMutation) AddedDestinationPort() (r int, exists bool) {
	v := m.adddestination_port
	if v == nil {
		return
	}
	return *v, true
}

// ResetDestinationPort resets all changes to the "destination_port" field.
func (m *MessageMutation) ResetDestinationPort() {
	m.destination_port = nil
	m.adddestination_port = nil
}

// SetData sets the "data" field.
func (m *MessageMutation) SetData(b []byte) {
	m.data = &b
}

// Data returns the value of the "data" field in the mutation.
func (m *MessageMutation) Data() (r []byte, exists bool) {
	v := m.data
	if v == nil {
		return
	}
	return *v, true
}

// OldData returns the old "data" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldData(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldData: %w", err)
	}
	return oldValue.Data, nil
}

// ResetData resets all changes to the "data" field.
func (m *MessageMutation) ResetData() {
	m.data = nil
}

// Where appends a list predicates to the MessageMutation builder.
func (m *MessageMutation) Where(ps ...predicate.Message) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *MessageMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Message).
func (m *MessageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MessageMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.timestamp != nil {
		fields = append(fields, message.FieldTimestamp)
	}
	if m.version != nil {
		fields = append(fields, message.FieldVersion)
	}
	if m.segment != nil {
		fields = append(fields, message.FieldSegment)
	}
	if m.opcode != nil {
		fields = append(fields, message.FieldOpcode)
	}
	if m.source_address != nil {
		fields = append(fields, message.FieldSourceAddress)
	}
	if m.source_port != nil {
		fields = append(fields, message.FieldSourcePort)
	}
	if m.destination_address != nil {
		fields = append(fields, message.FieldDestinationAddress)
	}
	if m.destination_port != nil {
		fields = append(fields, message.FieldDestinationPort)
	}
	if m.data != nil {
		fields = append(fields, message.FieldData)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MessageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case message.FieldTimestamp:
		return m.Timestamp()
	case message.FieldVersion:
		return m.Version()
	case message.FieldSegment:
		return m.Segment()
	case message.FieldOpcode:
		return m.Opcode()
	case message.FieldSourceAddress:
		return m.SourceAddress()
	case message.FieldSourcePort:
		return m.SourcePort()
	case message.FieldDestinationAddress:
		return m.DestinationAddress()
	case message.FieldDestinationPort:
		return m.DestinationPort()
	case message.FieldData:
		return m.Data()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MessageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case message.FieldTimestamp:
		return m.OldTimestamp(ctx)
	case message.FieldVersion:
		return m.OldVersion(ctx)
	case message.FieldSegment:
		return m.OldSegment(ctx)
	case message.FieldOpcode:
		return m.OldOpcode(ctx)
	case message.FieldSourceAddress:
		return m.OldSourceAddress(ctx)
	case message.FieldSourcePort:
		return m.OldSourcePort(ctx)
	case message.FieldDestinationAddress:
		return m.OldDestinationAddress(ctx)
	case message.FieldDestinationPort:
		return m.OldDestinationPort(ctx)
	case message.FieldData:
		return m.OldData(ctx)
	}
	return nil, fmt.Errorf("unknown Message field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case message.FieldTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	case message.FieldVersion:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	case message.FieldSegment:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSegment(v)
		return nil
	case message.FieldOpcode:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOpcode(v)
		return nil
	case message.FieldSourceAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSourceAddress(v)
		return nil
	case message.FieldSourcePort:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSourcePort(v)
		return nil
	case message.FieldDestinationAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDestinationAddress(v)
		return nil
	case message.FieldDestinationPort:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDestinationPort(v)
		return nil
	case message.FieldData:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetData(v)
		return nil
	}
	return fmt.Errorf("unknown Message field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MessageMutation) AddedFields() []string {
	var fields []string
	if m.addversion != nil {
		fields = append(fields, message.FieldVersion)
	}
	if m.addsegment != nil {
		fields = append(fields, message.FieldSegment)
	}
	if m.addopcode != nil {
		fields = append(fields, message.FieldOpcode)
	}
	if m.addsource_port != nil {
		fields = append(fields, message.FieldSourcePort)
	}
	if m.adddestination_port != nil {
		fields = append(fields, message.FieldDestinationPort)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MessageMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case message.FieldVersion:
		return m.AddedVersion()
	case message.FieldSegment:
		return m.AddedSegment()
	case message.FieldOpcode:
		return m.AddedOpcode()
	case message.FieldSourcePort:
		return m.AddedSourcePort()
	case message.FieldDestinationPort:
		return m.AddedDestinationPort()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageMutation) AddField(name string, value ent.Value) error {
	switch name {
	case message.FieldVersion:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVersion(v)
		return nil
	case message.FieldSegment:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSegment(v)
		return nil
	case message.FieldOpcode:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOpcode(v)
		return nil
	case message.FieldSourcePort:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSourcePort(v)
		return nil
	case message.FieldDestinationPort:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDestinationPort(v)
		return nil
	}
	return fmt.Errorf("unknown Message numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MessageMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(message.FieldOpcode) {
		fields = append(fields, message.FieldOpcode)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MessageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MessageMutation) ClearField(name string) error {
	switch name {
	case message.FieldOpcode:
		m.ClearOpcode()
		return nil
	}
	return fmt.Errorf("unknown Message nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MessageMutation) ResetField(name string) error {
	switch name {
	case message.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	case message.FieldVersion:
		m.ResetVersion()
		return nil
	case message.FieldSegment:
		m.ResetSegment()
		return nil
	case message.FieldOpcode:
		m.ResetOpcode()
		return nil
	case message.FieldSourceAddress:
		m.ResetSourceAddress()
		return nil
	case message.FieldSourcePort:
		m.ResetSourcePort()
		return nil
	case message.FieldDestinationAddress:
		m.ResetDestinationAddress()
		return nil
	case message.FieldDestinationPort:
		m.ResetDestinationPort()
		return nil
	case message.FieldData:
		m.ResetData()
		return nil
	}
	return fmt.Errorf("unknown Message field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MessageMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MessageMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MessageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MessageMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MessageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MessageMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MessageMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Message unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MessageMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Message edge %s", name)
}
